openapi: "3.0.0"
info:
  version: 14.0.0
  title: Jeera Project Manager
  license:
    name: MIT
  contact:
    name: Antoine Cheron
    email: cheron.antoine@gmail.com
paths:
  /users:
    get:
      summary: List existing users public information
      operationId: listUsers
      tags:
        - users
      responses:
        '200':
          description: All existing users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailsList'
      security: 
        - bearerToken: []
    post:
      summary: Creates a new user (admin only)
      operationId: createUser
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User just created
          headers:
            Location:
              description: 'URL to the resource created'
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          links:
            confirmEmail:
              operationId: confirmEmail
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/confirm: # to remove in v2
    get:
      summary: Confirm email ownership
      operationId: confirmEmail
      tags: 
        - users
      parameters:
        - name: token
          in: query
          description: Confirmation token received by email
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          links:
            login:
              operationId: login
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/login:
    post:
      summary: Login into the application
      operationId: login
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful connection
          headers:
            Authorization:
              description: Token to use
              required: true
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginConfirmation'
          links:
            logout:
              operationId: logout
            getUserDetails:
              operationId: getUserDetails
            listProjects:
              operationId: listProjects
        '403':
          description: 'Wrong credentials'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/logout:
    post:
      summary: Logout
      operationId: logout
      tags: 
        - users
      responses:
        '204':
          description: 'Successfully logged out - revoke token'
        '500':
          description: 'Unexpected internal server error, try again'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /user:
    get:
      summary: Get a user details
      operationId: getCurrentUserDetails
      tags:
        - users
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          links:
            listProjects:
              operationId: listProjects
            changePassword:
              operationId: updateUserPassword
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /user/{userId}:
    parameters: 
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get a user details
      operationId: getUserDetails
      tags:
        - users
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /user/password:
    parameters: 
      - $ref: '#/components/parameters/userId'
    put:
      summary: Updates a user's password
      operationId: updateUserPassword
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        '204':
          description: 'Password successfully updated'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /projects:
    get:
      summary: List the projects that the connected user can see
      operationId: listProjects
      security:
        - bearerToken: []
      tags:
        - projects
      parameters:
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result set
          required: false
          schema:
            type: integer
            format: int8
            minimum: 0
            default: 0
        - name: limit
          in: query
          description: Number of elements to get
          required: false
          schema:
            type: integer
            format: int8
            minimum: 1
            maximum: 40
            default: 5
      responses:
        '200':
          description: 'Success'
          headers:
            X-Next:
              description: Link to next page
              required: false
              schema:
                type: string
                format: url
            X-Last:
              description: Link to last page
              required: false
              schema:
                type: string
                format: url
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ProjectsList'
          links:
            createProject:
              operationId: createProject
            setTaskStatusesFlow:
              operationId: setProjectTaskStatusFlow
            setDetails:
              operationId: setProjectDetails
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: First step of the process to create a project out of three steps
      operationId: createProject
      tags:
        - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          $ref: '#/components/responses/projectDetails'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /project/{projectId}/task-status-flow:
    parameters: 
      - $ref: '#/components/parameters/projectId'
    post:
      summary: Set the tasks status flow of the project (step 3/3 of the process to create a project)
      operationId: setProjectTaskStatusFlow
      tags:
        - projects
      security: 
        - bearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                taskStatuses:
                  type: array
                  minimum: 1
                  items:
                    $ref: '#/components/schemas/TaskStatus'
                taskStatusTransitions:
                  type: array
                  minimum: 1
                  items:
                    $ref: '#/components/schemas/TaskStatusTransition'
              required:
                - taskStatuses
                - taskStatusTransitions

      responses:
        '200':
          $ref: '#/components/responses/projectDetails'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /project/{projectId}/details:
    parameters: 
      - $ref: '#/components/parameters/projectId'
    post:
      summary: Set the project details (step 2/3 of the process to create a project)
      operationId: setProjectDetails
      tags:
        - projects
      security: 
        - bearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                collaborators:
                  type: array
                  items:
                    type: string
                    description: The name of the users to add as collaborators of the project
              required:
                - description
      responses:
        '200':
          $ref: '#/components/responses/projectDetails'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /project/{projectId}:
    parameters: 
        - $ref: '#/components/parameters/projectId'
    get:
      summary: Get the detail of a project
      operationId: getProjectDetails
      tags:
        - projects
      responses:
        '200':
          $ref: '#/components/responses/projectDetails'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
    delete:
      summary: Delete a project (only if archived and the user is an admin)
      operationId: deleteProject
      tags:
        - projects
      responses:
        '204':
          description: Success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /task/{taskId}:
    parameters: 
      - $ref: '#/components/parameters/taskId'
    get:
      summary: Get the detail of a task
      operationId: getTaskDetails
      tags:
        - tasks
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          links:
            update:
              operationId: updateTask
              parameters:
                taskId: '$response.body#/id'
                parentProjectId: '$response.body#/parentProjectId'
                id: '$response.body#/id'
                title: '$response.body#/title'
                description: '$response.body#/details/description'
                assignee: '$response.body#/details/assignee'
                points: '$response.body#/points'
                tags: '$response.body#/tags'
                priority: '$response.body#/priority'
            reverseArchivedState:
              operationId: reverseTaskArchivedState
              parameters:
                taskId: '$response.body#/id'
            delete:
              operationId: deleteTask
              parameters:
                taskId: '$response.body#/id'
            updateStatus:
              operationId: updateTaskStatus
              parameters:
                taskId: '$response.body#/id'
            analytics:
              operationId: getAnalytics
              parameters:
                resourceId: '$response.body#/id'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a task
      operationId: deleteTask
      tags:
        - tasks
      responses:
        '204':
          description: Success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /task:
    put:
      summary: Update some fields of the task
      operationId: updateTask
      tags:
        - tasks
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TechnicalStoryUpdateRequest'
                - $ref: '#/components/schemas/UserStoryUpdateRequest'
      responses:
        '200':
          description: Update successfully done
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          links:
            update:
              operationId: updateTask
              parameters:
                taskId: '$response.body#/id'
                parentProjectId: '$response.body#/parentProjectId'
                id: '$response.body#/id'
                title: '$response.body#/title'
                description: '$response.body#/details/description'
                assignee: '$response.body#/details/assignee'
                points: '$response.body#/points'
                tags: '$response.body#/tags'
                priority: '$response.body#/priority'
            reverseArchivedState:
              operationId: reverseTaskArchivedState
              parameters:
                taskId: '$response.body#/id'
            delete:
              operationId: deleteTask
              parameters:
                taskId: '$response.body#/id'
                projectId: '$response.body#/parentProjectId'
            updateStatus:
              operationId: updateTaskStatus
              parameters:
                taskId: '$response.body#/id'
            analytics:
              operationId: getAnalytics
              parameters:
                resourceId: '$response.body#/id'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /task/{taskId}/archive:
    post:
      description: Reverse the archived status of a task
      operationId: reverseTaskArchivedState
      tags:
        - tasks
      parameters: 
        - name: taskId
          in: path
          description: Id of the task to archive
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  isArchived:
                    type: boolean
                required: [ isArchived ]
          links:
            update:
              operationId: updateTask
              parameters:
                taskId: '$response.body#/id'
                id: '$response.body#/id'
                title: '$response.body#/title'
                description: '$response.body#/details/description'
                assignee: '$response.body#/details/assignee'
                points: '$response.body#/points'
                tags: '$response.body#/details/tags'
                priority: '$response.body#/details/priority'
            reverseArchivedState:
              operationId: reverseTaskArchivedState
              parameters:
                taskId: '$response.body#/id'
            delete:
              operationId: deleteTask
              parameters:
                taskId: '$response.body#/id'
            updateStatus:
              operationId: updateTaskStatus
              parameters:
                taskId: '$response.body#/id'
            analytics:
              operationId: getAnalytics
              x-@relation: vnd_jeera:rel/analytics
              parameters:
                resourceId: '$response.body#/id'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /project/{projectId}/star:
    post:
      description: Reverse starred status of a project
      operationId: starProject
      parameters: 
        - $ref: '#/components/parameters/projectId'
      tags:
        - projects
      responses:
        '204':
          description: Success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - bearerToken: []
  /project/{projectId}/addCollaborator:
    post:
      description: Invite users to the project
      operationId: inviteUsersToProject
      parameters: 
        - $ref: '#/components/parameters/projectId'
      tags:
        - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteUsersToProjectRequest'
      responses:
        '204':
          description: Success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /project/{projectId}/archive:
    post:
      description: Archive a project
      operationId: switchProjectArchiveState
      tags:
        - projects
      parameters: 
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  isArchived:
                    type: boolean
                required:
                  - isArchived
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /tasks:
    parameters: 
        - $ref: '#/components/parameters/projectId'
    get:
      summary: List user tasks
      operationId: listTasks
      tags:
        - tasks
      parameters:
        - $ref: '#/components/parameters/queryProjectId'
        - name: createdBefore
          in: query
          description: Minimum date of tasks to list
          required: false
          schema:
            type: string
            format: date
        - name: offset
          in: query
          description: The number of items to skip before starting to collect the result set
          required: false
          schema:
            type: integer
            format: int8
            minimum: 0
            default: 0
        - name: limit
          in: query
          description: Number of elements to get
          required: false
          schema:
            type: integer
            format: int8
            minimum: 1
            maximum: 40
            default: 10
      responses:
        '200':
          description: Success - list of tasks
          headers:
            Link:
              description: 'Contextually relevant links - provided links all have a rel attribute as recommended here: https://www.w3.org/wiki/LinkHeader'
              schema:
                type: string
                format: link-http-header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksList'
          links:
            createTechnicalStory:
              operationId: createTechnicalStory
              parameters:
                parentProjectId: "$request.query.queryProjectId"
            createUserStory:
              operationId: createUserStory
              parameters:
                parentProjectId: "$request.query.queryProjectId"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /tasks/technicalStory:
    post:
      summary: Creates a technical story
      operationId: createTechnicalStory
      tags:
        - tasks
      requestBody:
        description: Technical story to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TechnicalStoryCreationRequest'
      responses:
        '201':
          description: Created technical story
          headers:
            Location:
              description: 'URL to the resource created'
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TechnicalStory'
          links:
            update:
              operationId: updateTask
              parameters:
                taskId: '$response.body#/id'
                parentProjectId: '$response.body#/parentProjectId'
                id: '$response.body#/id'
                title: '$response.body#/title'
                description: '$response.body#/details/description'
                assignee: '$response.body#/details/assignee'
                points: '$response.body#/points'
                tags: '$response.body#/tags'
                priority: '$response.body#/priority'
            reverseArchivedState:
              operationId: reverseTaskArchivedState
              parameters:
                taskId: '$response.body#/id'
            delete:
              operationId: deleteTask
              parameters:
                taskId: '$response.body#/id'
            updateStatus:
              operationId: updateTaskStatus
              parameters:
                taskId: '$response.body#/id'
            analytics:
              operationId: getAnalytics
              parameters:
                resourceId: '$response.body#/id'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /tasks/userStory:
    parameters: 
      - $ref: '#/components/parameters/projectId'
    post:
      summary: Creates a user story
      operationId: createUserStory
      tags:
        - tasks
      requestBody:
        description: User story to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserStoryCreationRequest'
      responses:
        '201':
          description: Created user story
          headers:
            Location:
              description: 'URL to the resource created'
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStory'
          links:
            update:
              operationId: updateTask
              parameters:
                taskId: '$response.body#/id'
                parentProjectId: '$response.body#/parentProjectId'
                id: '$response.body#/id'
                title: '$response.body#/title'
                description: '$response.body#/details/description'
                assignee: '$response.body#/details/assignee'
                points: '$response.body#/points'
                tags: '$response.body#/tags'
                priority: '$response.body#/priority'
            reverseArchivedState:
              operationId: reverseTaskArchivedState
              parameters:
                taskId: '$response.body#/id'
            delete:
              operationId: deleteTask
              parameters:
                taskId: '$response.body#/id'
            updateStatus:
              operationId: updateTaskStatus
              parameters:
                taskId: '$response.body#/id'
            analytics:
              operationId: getAnalytics
              parameters:
                resourceId: '$response.body#/id'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /task/{taskId}/status:
    parameters:
      - $ref: '#/components/parameters/taskId'
    put:
      description: Update the task's status
      operationId: updateTaskStatus
      tags:
        - tasks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
      responses:
        '204':
          description: Success
          links:
            modify:
              operationId: updateTask
              parameters:
                taskId: '$response.body#/id'
                parentProjectId: '$response.body#/parentProjectId'
                id: '$response.body#/id'
                title: '$response.body#/title'
                description: '$response.body#/details/description'
                assignee: '$response.body#/details/assignee'
                points: '$response.body#/points'
                tags: '$response.body#/tags'
                priority: '$response.body#/priority'
            reverseArchivedState:
              operationId: reverseTaskArchivedState
              parameters:
                taskId: '$response.body#/id'
            updateStatus:
              operationId: updateTaskStatus
              parameters:
                taskId: '$response.body#/id'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security: 
        - bearerToken: []
  /analytics/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/resourceId'
    get:
      description: Get analytics on a resource
      operationId: getAnalytics
      security: 
        - bearerToken: []
      tags:
        - analytics
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analytics'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


components:
  securitySchemes:
    bearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    projectDetails:
      description: Project details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Project'
      links:
        inviteUser:
          operationId: inviteUsersToProject
          parameters:
            projectId: '$response.body#/projectId'
        createTechnicalStory:
          operationId: createTechnicalStory
          parameters:
            parentProjectId: '$response.body#/id'
        createUserStory:
          operationId: createUserStory
          parameters:
            parentProjectId: '$response.body#/id'
        listTasks:
          operationId: listTasks
          parameters:
            queryProjectId: '$response.body#/id'
        reverseArchivedState:
          operationId: switchProjectArchiveState
          parameters:
            projectId: '$response.body#/id'
        delete:
          operationId: deleteProject
          parameters:
            projectId: '$response.body#/id'
        star:
          operationId: starProject
          parameters:
            projectId: '$response.body#/id'
        analytics:
          operationId: getAnalytics
          parameters:
            resourceId: '$response.body#/id'
        setTaskStatusesFlow:
          operationId: setProjectTaskStatusFlow
          parameters:
            projectId: '$response.body#/id'
        setDetails:
          operationId: setProjectDetails
          parameters:
            projectId: '$response.body#/id'
  parameters:
    userId: 
      name: userId
      in: path
      description: Id of the user to retrieve details for
      required: true
      schema:
        type: string
        format: url
    taskId:
      name: taskId
      in: path
      description: Id of the task to retrieve details for
      required: true
      schema:
        type: string
        format: url
    projectId:
      name: projectId
      in: path
      description: Id of the project to retrieve details for
      required: true
      schema:
        type: string
        format: url
    resourceId:
      name: resourceId
      in: path
      description: Id of any resource hold by the server
      required: true
      schema:
        type: string
        format: url
    queryProjectId:
      name: queryProjectId
      in: query
      description: Id of the project to retrieve details for
      required: true
      schema:
        type: string
        format: url
  schemas:
    CreateUserRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        email:
          type: string
          format: email
        role:
          $ref: '#/components/schemas/UserRole'
    UserDetailsList:
      type: array
      items:
        $ref: '#/components/schemas/UserDetails'
    UserDetails:
      type: object
      properties:
        username:
          type: string
        id:
          type: string
        email:
          type: string
          format: email
        role:
          $ref: '#/components/schemas/UserRole'
        starredProjects:
          type: array
          items:
            type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
      required: [ 'username', 'password' ]
    LoginConfirmation:
      type: object
      properties:
        token:
          type: string
    UpdatePasswordRequest:
      type: object
      properties:
        previousPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
      required: [ previousPassword, newPassword ]
    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
      required: [ name ]
    ProjectsList:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    Project:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        isArchived:
          type: boolean
        collaborators:
          type: array
          items:
            type: string
            description: username
        description:
          type: string
        availableTaskStatuses:
          type: array
          items:
            $ref: '#/components/schemas/TaskStatus'
        taskStatusTransitions:
          type: array
          items:
            $ref: '#/components/schemas/TaskStatusTransition'
        nextCreationStep:
          type: string
          enum: 
            - INITIALIZATION
            - TASK_FLOW_SETUP
            - INFORMATION_SETUP
            - CREATION_COMPLETED
      required: [ name, id, isArchived, collaborators ]
    TasksList:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    TechnicalStoryCreationRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 4
          maxLength: 80
        parentProjectId:
          type: string
          format: url
        description:
          type: string
          minLength: 0
          maxLength: 4000
        assignee:
          type: string
        tags:
          type: array
          items:
            type: string
          maxItems: 10
        priority:
          $ref: '#/components/schemas/Priority'
      required: [ title, assignee ]
    TechnicalStoryUpdateRequest:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          minLength: 4
          maxLength: 80
        details:
          $ref: '#/components/schemas/TaskDetailsUpdate'
        tags:
          type: array
          items:
            type: string
          maxItems: 10
        priority:
          $ref: '#/components/schemas/Priority'
    TechnicalStory:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        parentProjectId:
          type: string
        details:
          $ref: '#/components/schemas/TaskDetails'
        tags:
          type: array
          items:
            type: string
        priority:
          $ref: '#/components/schemas/Priority'
        isArchived:
          type: boolean       
      required: [ id, title, parentProjectId, details, isArchived ]
    TaskDetails:
      type: object
      properties:
        description:
          type: string
        assignee:
          type: string
        status:
          type: string
    TaskDetailsUpdate:
      type: object
      properties:
        description:
          type: string
        assignee:
          type: string
    UserStoryCreationRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 4
          maxLength: 80
        parentProjectId:
          type: string
          format: url
        description:
          type: string
          minLength: 0
          maxLength: 4000
        assignee:
          type: string
        points:
          type: number
          minimum: 0
          maximum: 120
        tags:
          type: array
          items:
            type: string
          maxItems: 10
        priority:
          $ref: '#/components/schemas/Priority'
      required: [ title, assignee, points ]
    UserStoryUpdateRequest:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          minLength: 4
          maxLength: 80
        details:
          $ref: '#/components/schemas/TaskDetailsUpdate'
        points:
          type: number
          minimum: 0
          maximum: 120
        tags:
          type: array
          items:
            type: string
          maxItems: 10
        priority:
          $ref: '#/components/schemas/Priority'
    UserStory:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        points:
          type: number
        parentProjectId:
          type: string
        details:
          $ref: '#/components/schemas/TaskDetails'
        tags:
          type: array
          items:
            type: string
        priority:
          $ref: '#/components/schemas/Priority'
        isArchived:
          type: boolean
      required: [ id, title, points, parentProjectId, details, isArchived ]
    Task:
      oneOf:
        - $ref: '#/components/schemas/TechnicalStory'
        - $ref: '#/components/schemas/UserStory'
    TaskStatus:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
    TaskStatusTransition:
      type: object
      properties:
        from:
          type: string
          description: Either a comma-delimited string of TaskStatus ids or '*' to select them all
        to:
          type: string
          description: Either a comma-delimited string of TaskStatus ids or '*' to select them all
    Priority:
      type: string
      enum:
        - blocking
        - critical
        - important
        - high
        - medium
        - low
        - simple
    UserRole:
      type: string
      enum: 
        - Product Owner
        - Developer
    Analytics:
      type: object
      properties:
        resourceId:
          type: string
        createdOn:
          type: string
          format: date
        lastUpdatedOn:
          type: string
          format: date
        updatesCount:
          type: integer
          format: int32
      required:
        - createdOn
        - lastUpdatedOn
        - updatesCount
        - resourceId
    Error:
      type: object
      properties:
        code:
          type: string
        description:
          type: string
    InviteUsersToProjectRequest:
      type: object
      properties:
        users:
          type: array
          items:
            type: string
            description: username
          minItems: 1
          maxItems: 5
    HypermediaControls:
      type: object
      required:
        - '_links'
      properties:
        _links:
          type: array
          items: 
            oneOf:
              - type: string
              - $ref: '#/components/schemas/Link'
    Link:
      type: object
      required:
        - relation
      properties:
        relation:
          type: string
        parameters:
          type: object
          format: 'Map<String, Any>'